basePath: /api/v1
definitions:
  amenitydto.CreateAmenityReq:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  amenitydto.UpdateAmenityReq:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  authdto.LoginReq:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  authdto.SignUpReq:
    properties:
      email:
        type: string
      password:
        type: string
      password_confirm:
        type: string
      username:
        type: string
    type: object
  categorydto.CreateCategoryReq:
    properties:
      name:
        type: string
    type: object
  categorydto.UpdateCategoryReq:
    properties:
      name:
        type: string
    type: object
  presenter.JsonResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  reviewdto.CreateSpotReviewReq:
    properties:
      payload:
        type: string
      rating:
        type: integer
    type: object
  spotdto.CreateSpotReq:
    properties:
      address:
        type: string
      amenities:
        items:
          type: integer
        type: array
      category:
        type: integer
      city:
        type: string
      country:
        type: string
      description:
        type: string
      name:
        type: string
      pet_friendly:
        type: boolean
      price:
        type: integer
    type: object
  spotdto.UpdateSpotReq:
    properties:
      address:
        type: string
      amenities:
        items:
          type: integer
        type: array
      category:
        type: integer
      city:
        type: string
      country:
        type: string
      description:
        type: string
      name:
        type: string
      pet_friendly:
        type: boolean
      price:
        type: integer
    type: object
  userdto.ChangePasswordReq:
    properties:
      new_password:
        type: string
      new_password_confirm:
        type: string
      old_password:
        type: string
    type: object
info:
  contact:
    email: ggorockee@gmail.com
    name: ggorockee
  description: This is an API for ggocamping Application
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: ggocamping App
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: requestBody
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/authdto.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      summary: Login
      tags:
      - Auth
  /category:
    get:
      consumes:
      - application/json
      description: GetCategoryList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: GetCategoryList
      tags:
      - Category
    post:
      consumes:
      - application/json
      description: CreateCategory
      parameters:
      - description: requestBody
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/categorydto.CreateCategoryReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: CreateCategory
      tags:
      - Category
  /category/{id}:
    delete:
      consumes:
      - application/json
      description: DeleteCategory
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: DeleteCategory
      tags:
      - Category
    get:
      consumes:
      - application/json
      description: GetCategory
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: GetCategory
      tags:
      - Category
    put:
      consumes:
      - application/json
      description: UpdateCategory
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: integer
      - description: requestBody
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/categorydto.UpdateCategoryReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: UpdateCategory
      tags:
      - Category
  /healthcheck:
    get:
      consumes:
      - application/json
      description: Health Check
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      summary: Health Check
      tags:
      - HealthCheck
  /spot:
    get:
      consumes:
      - application/json
      description: GetAllSpots
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: GetAllSpots
      tags:
      - Spot
    post:
      consumes:
      - application/json
      description: AddSpot
      parameters:
      - description: requestBody
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/spotdto.CreateSpotReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: AddSpot
      tags:
      - Spot
  /spot/{id}:
    delete:
      consumes:
      - application/json
      description: RemoveSpot
      parameters:
      - description: spot id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: RemoveSpot
      tags:
      - Spot
    get:
      consumes:
      - application/json
      description: GetSpot
      parameters:
      - description: spot id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: GetSpot
      tags:
      - Spot
    put:
      consumes:
      - application/json
      description: UpdateSpot
      parameters:
      - description: spot id
        in: path
        name: id
        required: true
        type: integer
      - description: requestBody
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/spotdto.UpdateSpotReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: UpdateSpot
      tags:
      - Spot
  /spot/{id}/review:
    post:
      consumes:
      - application/json
      description: AddSpotReview
      parameters:
      - description: requestBody
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/reviewdto.CreateSpotReviewReq'
      - description: spot id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: AddSpotReview
      tags:
      - Spot
  /spot/{id}/reviews:
    get:
      consumes:
      - application/json
      description: SpotReviews
      parameters:
      - description: spot id
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: SpotReviews
      tags:
      - Spot
  /spot/amenity:
    get:
      consumes:
      - application/json
      description: GetAmenities
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: GetAmenities
      tags:
      - Amenity
    post:
      consumes:
      - application/json
      description: CreateAmenity
      parameters:
      - description: requestBody
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/amenitydto.CreateAmenityReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: CreateAmenity
      tags:
      - Amenity
  /spot/amenity/{id}:
    delete:
      consumes:
      - application/json
      description: DeleteAmenity
      parameters:
      - description: amenity id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: DeleteAmenity
      tags:
      - Amenity
    get:
      consumes:
      - application/json
      description: GetAmenity
      parameters:
      - description: amenity id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: GetAmenity
      tags:
      - Amenity
    put:
      consumes:
      - application/json
      description: UpdateAmenity
      parameters:
      - description: amenity id
        in: path
        name: id
        required: true
        type: integer
      - description: requestBody
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/amenitydto.UpdateAmenityReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: UpdateAmenity
      tags:
      - Amenity
  /user/change-password:
    put:
      consumes:
      - application/json
      description: ChangePassword
      parameters:
      - description: requestBody
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/userdto.ChangePasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: ChangePassword
      tags:
      - Users
  /user/signup:
    post:
      consumes:
      - application/json
      description: Create User
      parameters:
      - description: requestBody
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/authdto.SignUpReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      summary: Create User
      tags:
      - Auth
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
