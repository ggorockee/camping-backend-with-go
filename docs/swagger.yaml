basePath: /v1
definitions:
  dto.AmenityDetailOut:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  dto.AmenityListOut:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.CategoryDetailOut:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  dto.CategoryListOut:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  dto.ChangePasswordIn:
    properties:
      new_password:
        type: string
      new_password_confirm:
        type: string
      old_password:
        type: string
    type: object
  dto.CreateAmenityIn:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  dto.CreateCategoryIn:
    properties:
      name:
        type: string
    type: object
  dto.CreateSpotIn:
    properties:
      address:
        type: string
      amenities:
        items:
          type: integer
        type: array
      category:
        type: integer
      city:
        type: string
      country:
        type: string
      description:
        type: string
      name:
        type: string
      pet_friendly:
        type: boolean
      price:
        type: integer
    type: object
  dto.LoginIn:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.SignUpIn:
    properties:
      email:
        type: string
      password:
        type: string
      password_confirm:
        type: string
      username:
        type: string
    type: object
  dto.UpdateAmenityIn:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  dto.UpdateCategoryIn:
    properties:
      name:
        type: string
    type: object
  dto.UpdateSpotIn:
    properties:
      address:
        type: string
      amenities:
        items:
          type: integer
        type: array
      category:
        type: integer
      city:
        type: string
      country:
        type: string
      description:
        type: string
      name:
        type: string
      pet_friendly:
        type: boolean
      price:
        type: integer
    type: object
  entities.Amenity:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  entities.Category:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        description: Time Logging
        type: string
    type: object
  entities.Review:
    properties:
      created_at:
        type: string
      id:
        type: integer
      payload:
        type: string
      rating:
        type: integer
      spot:
        $ref: '#/definitions/entities.Spot'
      spot_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entities.User'
      user_id:
        type: integer
    type: object
  entities.Spot:
    properties:
      address:
        type: string
      amenities:
        items:
          $ref: '#/definitions/entities.Amenity'
        type: array
      category:
        $ref: '#/definitions/entities.Category'
      category_id:
        description: CategoryId가 null일 수가 있음
        type: integer
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      pet_friendly:
        type: boolean
      price:
        type: integer
      reviews:
        items:
          $ref: '#/definitions/entities.Review'
        type: array
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entities.User'
      user_id:
        type: integer
    type: object
  entities.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  presenter.JsonResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
info:
  contact:
    email: ggorockee@gmail.com
    name: ggorockee
  description: This is an API for ggocamping Application
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: ggocamping App
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login Schema
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/presenter.JsonResponse'
            - properties:
                data:
                  type: string
              type: object
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      summary: Login
      tags:
      - Auth
  /category:
    get:
      consumes:
      - application/json
      description: GetCategoryList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/presenter.JsonResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.CategoryListOut'
                  type: array
              type: object
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: GetCategoryList
      tags:
      - Category
    post:
      consumes:
      - application/json
      description: CreateCategory
      parameters:
      - description: Create Category Schema
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCategoryIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/presenter.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.CategoryListOut'
              type: object
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: CreateCategory
      tags:
      - Category
  /category/{id}:
    delete:
      consumes:
      - application/json
      description: DeleteCategory
      parameters:
      - description: Category Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: DeleteCategory
      tags:
      - Category
    get:
      consumes:
      - application/json
      description: GetCategory
      parameters:
      - description: Category Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/presenter.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.CategoryDetailOut'
              type: object
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: GetCategory
      tags:
      - Category
    put:
      consumes:
      - application/json
      description: UpdateCategory
      parameters:
      - description: Category Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Category
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCategoryIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/presenter.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.CategoryDetailOut'
              type: object
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: UpdateCategory
      tags:
      - Category
  /healthcheck:
    get:
      consumes:
      - application/json
      description: Health Check
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      summary: Health Check
      tags:
      - HealthCheck
  /spot:
    get:
      consumes:
      - application/json
      description: GetAllSpots
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: GetAllSpots
      tags:
      - Spot
    post:
      consumes:
      - application/json
      description: AddSpot
      parameters:
      - description: Create Spot
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSpotIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/presenter.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/entities.Spot'
              type: object
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: AddSpot
      tags:
      - Spot
  /spot/{id}:
    delete:
      consumes:
      - application/json
      description: RemoveSpot
      parameters:
      - description: Spot id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: RemoveSpot
      tags:
      - Spot
    get:
      consumes:
      - application/json
      description: GetSpot
      parameters:
      - description: Spot id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/presenter.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/entities.Spot'
              type: object
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: GetSpot
      tags:
      - Spot
    put:
      consumes:
      - application/json
      description: UpdateSpot
      parameters:
      - description: Spot id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Spot
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateSpotIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/presenter.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/entities.Spot'
              type: object
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: UpdateSpot
      tags:
      - Spot
  /spot/{id}/reviews:
    get:
      consumes:
      - application/json
      description: SpotReviews
      parameters:
      - description: Spot ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: SpotReviews
      tags:
      - Spot
  /spot/amenity:
    get:
      consumes:
      - application/json
      description: GetAmenities
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/presenter.JsonResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.AmenityListOut'
                  type: array
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/presenter.JsonResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.AmenityListOut'
                  type: array
              type: object
      security:
      - Bearer: []
      summary: GetAmenities
      tags:
      - Amenity
    post:
      consumes:
      - application/json
      description: CreateAmenity
      parameters:
      - description: Create Amenity
        in: body
        name: amenity
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAmenityIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/presenter.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.AmenityDetailOut'
              type: object
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: CreateAmenity
      tags:
      - Amenity
  /spot/amenity/{id}:
    delete:
      consumes:
      - application/json
      description: DeleteAmenity
      parameters:
      - description: Amenity ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/presenter.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.AmenityDetailOut'
              type: object
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: DeleteAmenity
      tags:
      - Amenity
    get:
      consumes:
      - application/json
      description: GetAmenity
      parameters:
      - description: Amenity ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/presenter.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.AmenityDetailOut'
              type: object
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: GetAmenity
      tags:
      - Amenity
    put:
      consumes:
      - application/json
      description: UpdateAmenity
      parameters:
      - description: Amenity ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Amenity
        in: body
        name: amenity
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAmenityIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/presenter.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.AmenityDetailOut'
              type: object
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: UpdateAmenity
      tags:
      - Amenity
  /user/changepw:
    put:
      consumes:
      - application/json
      description: ChangePassword
      parameters:
      - description: Change Password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePasswordIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      security:
      - Bearer: []
      summary: ChangePassword
      tags:
      - Users
  /user/signup:
    post:
      consumes:
      - application/json
      description: Create User
      parameters:
      - description: Register user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.SignUpIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/presenter.JsonResponse'
            - properties:
                data:
                  $ref: '#/definitions/entities.User'
              type: object
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/presenter.JsonResponse'
      summary: Create User
      tags:
      - Users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
